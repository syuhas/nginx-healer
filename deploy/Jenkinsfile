pipeline {
    agent any
    environment {
        PROJECT = "self-healer"
        AWS_REGION = "us-east-1"
        AWS_ACCOUNT_ID = "551796573889"
    }

    stages {
        stage('Output Environment Variables') {
            steps {
                script {
                    env.TF_VAR_project_name = "${PROJECT}"
                    env.TF_VAR_aws_region = "${AWS_REGION}"
                    env.TF_VAR_aws_account_id = "${AWS_ACCOUNT_ID}"
                    echo "Project Name: ${env.TF_VAR_project_name}"
                    echo "AWS Region: ${env.TF_VAR_aws_region}"
                    echo "AWS Account ID: ${env.TF_VAR_aws_account_id}"
                }
                sh 'echo "Environment Variables Set."'
            }
        }

        stage('Initialize Terraform') {
            when {
                expression { params.Options == 'Deploy' || params.Options == 'RebootInstanceNginx' }
            }
            steps {
                script {
                    sh 'terraform -chdir=deploy init'
                }
            }
        }

        stage('Plan Terraform') {
            when {
                expression { params.Options == 'Deploy' || params.Options == 'RebootInstanceNginx' }
            }
            steps {
                script {
                    sh 'terraform -chdir=deploy plan -out=plan.tfplan'
                }
            }
        }

        stage('Apply Terraform') {
            when {
                expression { params.Options == 'Deploy' || params.Options == 'RebootInstanceNginx' }
            }
            steps {
                script {
                    sh 'terraform -chdir=deploy apply plan.tfplan'
                    sh 'terraform -chdir=deploy refresh'
                    env.ANSIBLE_IP = sh(script: 'terraform -chdir=deploy output -raw ansible_ip', returnStdout: true).trim()
                    env.PROMETHEUS_IP = sh(script: 'terraform -chdir=deploy output -raw prometheus_ip', returnStdout: true).trim()
                    env.NGINX_IP = sh(script: 'terraform -chdir=deploy output -raw nginx_ip', returnStdout: true).trim()
                    env.NGINX_INSTANCE_ID = sh(script: 'terraform -chdir=deploy output -raw nginx_instance_id', returnStdout: true).trim()

                    echo "Ansible IP: ${env.ANSIBLE_IP}"
                    echo "Prometheus IP: ${env.PROMETHEUS_IP}"
                    echo "NGINX IP: ${env.NGINX_IP}"
                }
            }
        }

        stage('Reboot Nginx EC2 Instance') {
            when {
                expression { params.Options == 'RebootInstanceNginx' }
            }
            steps {
                sshagent(['ec2']) {
                    script {
                        echo "Instance ID: ${env.INSTANCE_ID}"
                        echo "AWS Region: ${env.TF_VAR_aws_region}"
                        sh '''
                            echo "Rebooting Nginx Instance..."
                            aws ec2 reboot-instances --instance-ids ${INSTANCE_ID} --region ${AWS_REGION}
                            echo "Waiting for Nginx instance to reboot..."
                            aws ec2 wait instance-status-ok --instance-ids ${INSTANCE_ID} --region ${AWS_REGION}
                            echo "Nginx instance is back online."
                            echo "Waiting for Nginx instance to be healthy..."
                            aws ec2 wait instance-status-ok --instance-ids ${INSTANCE_ID} --region ${AWS_REGION}
                            echo "Nginx instance is healthy."
                            echo "Restarting Containers..."
                            echo ""
                            ssh -o StrictHostKeyChecking=no "ec2-user@${NGINX_IP}" << EOF
                                cd /home/ec2-user/app
                                docker-compose build
                                docker-compose up -d
                                docker ps
                                docker logs -f nginx
                            EOF
                            echo "Containers restarted."
                        '''
                    }
                }
            }
        }

        stage('Build Servers') {
            when {
                expression { params.Options == 'Deploy' }
            }
            steps {
                sshagent(['ec2']) {
                    script {
                        dir('deploy') {
                            sh '''
                                echo "Ansible IP: ${ANSIBLE_IP}"
                                echo "Prometheus IP: ${PROMETHEUS_IP}"
                                echo "NGINX IP: ${NGINX_IP}"
                                chmod +x deploy.sh
                                ./deploy.sh
                            '''
                        }
                    }
                }
            }
        }

        stage('Destroy Terraform') {
            when {
                expression { params.Options == 'Destroy' }
            }
            steps {
                script {
                    sh 'terraform -chdir=deploy init'
                    sh 'terraform -chdir=deploy destroy -auto-approve'
                }
            }
        }
    }
    // post {
    //     always {
    //         cleanWs()
    //     }
    // }
}