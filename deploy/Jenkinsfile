pipeline {
    agent any
    environment {
        PROJECT = "self-healer"
        AWS_REGION = "us-east-1"
        AWS_ACCOUNT_ID = "551796573889"
    }

    stages {
        stage('Output Environment Variables') {
            steps {
                script {
                    env.TF_VAR_project_name = "${PROJECT}"
                    env.TF_VAR_aws_region = "${AWS_REGION}"
                    env.TF_VAR_aws_account_id = "${AWS_ACCOUNT_ID}"
                    echo "Project Name: ${env.TF_VAR_project_name}"
                    echo "AWS Region: ${env.TF_VAR_aws_region}"
                    echo "AWS Account ID: ${env.TF_VAR_aws_account_id}"
                }
                sh 'echo "Environment Variables Set."'
            }
        }

        stage('Initialize Terraform') {
            steps {
                script {
                    'terraform -chdir=deploy init'
                    'terraform -chdir=deploy plan -out=plan.tfplan'
                }
            }
        }

        stage('Apply Terraform Infrastructure') {
            steps {
                script {
                    sh 'terraform -chdir=deploy plan -out=plan.tfplan'
                    
                }
            }
        }

        stage('Deploy Instances') {
            steps {
                script {
                    sh 'terraform -chdir=deploy apply plan.tfplan'
                    env.ANSIBLE_IP = sh(script: 'terraform output -raw ansible_ip', returnStdout: true).trim()
                    env.PROMETHEUS_IP = sh(script: 'terraform output -raw prometheus_ip', returnStdout: true).trim()
                    env.NGINX_IP = sh(script: 'terraform output -raw nginx_ip', returnStdout: true).trim()
                }
            }
        }

        stage('Build Servers') {
            steps {
                script {
                    dir('deploy') {
                        sh '''
                            chmod +x deploy.sh
                            ./deploy.sh
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}